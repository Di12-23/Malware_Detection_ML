#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np


# In[2]:


import matplotlib.pyplot as plt


# In[3]:


import seaborn as sns


# In[4]:


import pandas as pd


# In[5]:


from sklearn.model_selection import train_test_split


# In[6]:


from sklearn.ensemble import RandomForestClassifier


# In[7]:


from sklearn.metrics import accuracy_score


# In[10]:


# Load the dataset
data = pd.read_csv('Data(1).csv',sep="|",low_memory=True)


# In[11]:


data.head()


# In[14]:


data.shape


# In[15]:


data.describe()


# In[16]:


legit=data[0:41323].drop(["legitimate"],axis=1)
mal = data[41323::].drop(["legitimate"],axis=1)
print("The shape of the legist dataset is:%s samples,%sfeatures"%(legit.shape[0],legit.shape[1]))
print("The shape of the mal dataset is :%s samples,%s features"%(mal.shape[0],mal.shape[1]))


# In[17]:


fig=plt.figure()
ax=fig.add_axes([0,0,1,1])
ax.hist(data['legitimate'],20)
plt.show()


# DATA CLEANING

# In[18]:


y=data['legitimate']
data=data.drop(['legitimate'],axis=1)


# In[19]:


data=data.drop(['Name'],axis=1)
data=data.drop(['md5'],axis=1)
print("The name and md5 variable are removed succesfully")


# In[20]:


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(data,y,test_size=0.2,random_state=42)


# In[21]:


X_train.shape


# 
# Model Building
#  1.Random Forest
# 

# In[22]:


from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
clf=RandomForestClassifier(max_depth=2,random_state=0)
randomModel=clf.fit(X_train,y_train)


# Random forest Evaluation on test data

# In[23]:


from sklearn.metrics import f1_score,accuracy_score,auc,confusion_matrix


# In[24]:


#accuracy on the train data set
train_pred=randomModel.predict(X_train)
accuracy_score(y_train,train_pred)


# In[25]:


#accuracy on the test dataset
prediction=randomModel.predict(X_test)
accuracy_score(y_test,prediction)


# In[26]:


f1_score(y_test,prediction)


# Confusion Matrix

# In[27]:


# Create the confusion matrix
conf_matrix = confusion_matrix(y_test, prediction)

# Print the confusion matrix
print("Confusion Matrix:")
print(conf_matrix)

# Calculate and print the True Positives, True Negatives, False Positives, and False Negatives
TP = conf_matrix[1, 1]
TN = conf_matrix[0, 0]
FP = conf_matrix[0, 1]
FN = conf_matrix[1, 0]

print("True Positives:", TP)
print("True Negatives:", TN)
print("False Positives:", FP)
print("False Negatives:", FN)



# In[ ]:




